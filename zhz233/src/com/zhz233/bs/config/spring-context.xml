<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop.xsd 
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- 引入属性文件 -->
    <context:property-placeholder location="classpath:com/zhz233/bs/config/jdbc.properties"/>
    <!-- <context:property-placeholder location="classpath:com/zhz233/bs/config/redis.properties"/> -->
    
    <!-- Controller包(自动注入) -->
    <context:component-scan base-package="com.zhz233.bs.controller">
	    <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />
	</context:component-scan>
	 
	<!-- Service包(自动注入) -->
    <context:component-scan base-package="com.zhz233.bs.service.impl.*"/>

    <!-- 1.配置数据源 -->
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- jdbc驱动 -->
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <!-- 数据源 -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="0"/>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="20"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="0"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000"/>
        <property name="validationQuery" value="SELECT 1"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="testWhileIdle" value="true"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="25200000"/>
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>
        <!-- 监控数据库 -->
        <property name="filters" value="mergeStat"/>
    </bean>
    <!-- 1.1 jedisPoolConfig配置 -->
    <!-- <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        最大连接数  
        <property name="maxTotal" value="30" />
        最大空闲连接数  
        <property name="maxIdle" value="10" />  
        每次释放连接的最大数目  
        <property name="numTestsPerEvictionRun" value="1024" />  
        释放连接的扫描间隔（毫秒）  
        <property name="timeBetweenEvictionRunsMillis" value="30000" />  
        连接最小空闲时间  
        <property name="minEvictableIdleTimeMillis" value="1800000" />  
        连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放  
        <property name="softMinEvictableIdleTimeMillis" value="10000" />  
        获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1  
        <property name="maxWaitMillis" value="1500" />  
        在获取连接的时候检查有效性, 默认false  
        <property name="testOnBorrow" value="true" />  
        在空闲时检查有效性, 默认false  
        <property name="testWhileIdle" value="true" />  
        连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true  
        <property name="blockWhenExhausted" value="false" />
    </bean> -->
    <!-- 2.配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="classpath:com/zhz233/bs/config/mybatis-config.xml" />
        <!-- 扫描entity包 使用别名 -->
        <property name="typeAliasesPackage" value="com.zhz233.bs.model" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:com/zhz233/bs/mapper/*.xml"/>
    </bean>
    
    <!-- 2.1 配置jedisConnectionFactory对象 -->
    <!-- <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="121.10.105.64" />
        <property name="hostName" value="192.168.1.200" />
        <property name="hostName" value="#{redis.url}" />
        <property name="port" value="#{redis.port}"/>
        <property name="password" value="#{redis.password}"/>
        <property name="poolConfig" ref="jedisPoolConfig" />
        <property name="usePool" value="true"/>
        <property name="timeout" value="100000"/>
        <constructor-arg index="0" ref="jedisPoolConfig" /> 
    </bean> -->
    <!-- 2.2 redisTemplate 配置 -->
    <!-- <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">  
        <property name="connectionFactory" ref="jedisConnectionFactory"></property>  
        <property name="keySerializer">  
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>  
        </property>  
        <property name="valueSerializer">  
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>  
        </property>  
    </bean> --> 
    <!-- 2.3 jedisClientSing 配置 -->
    <!-- <bean id="jedisClientSing" class="com.zhz233.comn.utils.RedisUtils">
    </bean> -->
    <!-- 3.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="com.zhz233.bs.idao" />
    </bean>
    <!-- 4.配置事务管理 -->
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <!-- 5.配置基于注解的声明式事务 -->
    <!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
    	<tx:attributes>
    		<tx:method name="insert*" propagation="REQUIRED"/>
    		<tx:method name="create*" propagation="REQUIRED"/>
    		<tx:method name="save*" propagation="REQUIRED"/>
    		<tx:method name="add*" propagation="REQUIRED"/>
    		
    		<tx:method name="delete*" propagation="REQUIRED"/>
    		<tx:method name="remove*" propagation="REQUIRED"/>
    		<tx:method name="drop*" propagation="REQUIRED"/>
    		
    		<tx:method name="update*" propagation="REQUIRED"/>
    		<tx:method name="replace*" propagation="REQUIRED"/>
    		<tx:method name="alter*" propagation="REQUIRED"/>
    		<tx:method name="set*" propagation="REQUIRED"/>    		
    		
    		<tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
    		<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
    		<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
    	</tx:attributes>
    </tx:advice>
    <!-- 6.AOP配置 -->
    <!-- <aop:aspectj-autoproxy proxy-target-class="true" /> -->
    <aop:config>
    	<aop:advisor advice-ref="txAdvice" pointcut="execution(* service.impl.*.*(..))"/>
    </aop:config>
</beans>